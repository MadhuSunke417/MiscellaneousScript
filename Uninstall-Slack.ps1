## Set script requirements
#Requires -Version 3.0

##*=============================================
##* VARIABLE DECLARATION
##*=============================================
#region VariableDeclaration

## Get script path and name
[string]$ScriptPath = [System.IO.Path]::GetDirectoryName($MyInvocation.MyCommand.Definition)
[string]$ScriptName = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.MyCommand.Definition)

$TimeStamp = Get-Date -f s
$AppName = "Slack"

#Logfile generated by this script
$LogFolder = "C:\Windows\Temp"
if(-not(Test-Path c:\Logs)){New-Item -Path c:\Logs -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null}
$logfile = "$LogFolder\UninstallSlackfromUserProfiles.log"

#endregion
##*=============================================
##* END VARIABLE DECLARATION
##*=============================================

##*=============================================
##* FUNCTION LISTINGS
##*=============================================
#region FunctionListings

#CMTraceLog Function formats logging in CMTrace style
        function CMTraceLog {
         [CmdletBinding()]
    Param (
		    [Parameter(Mandatory=$false)]
		    $Message,
 
		    [Parameter(Mandatory=$false)]
		    $ErrorMessage,
 
		    [Parameter(Mandatory=$false)]
		    $Component = "RemoveMozilla",
 
		    [Parameter(Mandatory=$false)]
		    [int]$Type,
		
		    [Parameter(Mandatory=$true)]
		    $LogFile
	    )
    <#
    Type: 1 = Normal, 2 = Warning (yellow), 3 = Error (red)
    #>
	    $Time = Get-Date -Format "HH:mm:ss.ffffff"
	    $Date = Get-Date -Format "MM-dd-yyyy"
 
	    if ($ErrorMessage -ne $null) {$Type = 3}
	    if ($Component -eq $null) {$Component = " "}
	    if ($Type -eq $null) {$Type = 1}
 
	    $LogMessage = "<![LOG[$Message $ErrorMessage" + "]LOG]!><time=`"$Time`" date=`"$Date`" component=`"$Component`" context=`"`" type=`"$Type`" thread=`"`" file=`"`">"
	    $LogMessage | Out-File -Append -Encoding UTF8 -FilePath $LogFile
    }

##*=============================================
##* END FUNCTION LISTINGS
##*=============================================

##*=============================================
##* SCRIPT BODY
##*=============================================
#startregion
    CMTraceLog -Message "Script started at $(Get-Date)" -Type 1 -LogFile $logfile
    $userProfiles = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\*" | Where-Object {$_.PSChildName -match "S-1-5-21-(\d+-?){4}$"} | Select-Object @{Name="SID"; Expression={$_.PSChildName}}, @{Name="UserHive";Expression={"$($_.ProfileImagePath)\NTuser.dat"}}
    foreach ($userProfile in $userProfiles) {
        # Formatting the username in a separate variable
        $userName = $userProfile.UserHive.Split("\")[2]
        $registryPath = "Registry::HKEY_USERS\$($UserProfile.SID)\Software\Microsoft\Windows\CurrentVersion\Uninstall"
        if (Test-Path -Path $registryPath) {
            $installedApps = Get-ChildItem -Path $registryPath -Recurse | Get-ItemProperty | Where-Object {$_.DisplayName -like "Slack*" } 
            if ($installedApps) {
                CMTraceLog -Message "Installed Firefox applications found in HKCU for user: $userName" -Type 1 -LogFile $logfile
                Write-Verbose -Verbose -Message "Installed Firefox applications found in HKCU for user: $userName"
                foreach ($App in $installedApps) {
                    if ($App.UninstallString) {
                        $userCommand = '"C:\Users\USERNAME\AppData\Local\slack\Update.exe"'

                        # Replacing the placeholder: USERNAME with the actual username retrieved from the userprofile
                        # This can probably be done smarter, but I failed to find another method
                        $userCommand = $userCommand -replace "USERNAME",$userName 
                        #$userCommand = $userCommand -replace "VERSION" ,$App.DisplayVersion
                        
                        try {
                            Write-Verbose -Verbose -Message "Uninstalling application: $($App.DisplayName) as the logged on user: $userName"
                            CMTraceLog -Message "Uninstalling application: $($App.DisplayName) as the logged on user: $userName" -Type 1 -LogFile $logfile
                            Stop-Process -Name Slack -Force -ErrorAction SilentlyContinue
                            Start-Process $userCommand -ArgumentList "--uninstall -s" -Wait
                            Remove-Item  "C:\Users\$userName\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Slack Technologies Inc\Slack.lnk" -ErrorAction SilentlyContinue
                            Remove-Item  "C:\Users\$userName\Desktop\Slack.lnk" -ErrorAction SilentlyContinue
                            Remove-Item  "C:\Users\$userName\AppData\Local\slack" -Recurse -Force -ErrorAction SilentlyContinue
                            #Remove-Item  "C:\Users\$userName\AppData\Local\Mozilla\" -Recurse -Force -ErrorAction SilentlyContinue
                            $user = New-Object System.Security.Principal.NTAccount($username)
                            $sid = $user.Translate([System.Security.Principal.SecurityIdentifier])
                            $delP =  "registry::HKEY_USERS\$($sid.Value)\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"
                            try{
                            Get-ChildItem -Path $delP -Recurse -ErrorAction Stop | Get-ItemProperty | Where-Object {$_.DisplayName -like "Slack*" } | Remove-Item -Recurse -ErrorAction Stop
                            }catch{}
                        }
                        catch {
                             CMTraceLog -Message "Failed to uninstall application: $($App.DisplayName) for user: $userName" -Type 3 -LogFile $logfile
                             Write-Error -Message "Failed to uninstall application: $($App.DisplayName) for user: $userName"
                        }
                    }
                }
            }
            else {
                CMTraceLog -Message "No $AppName applications found in HKCU for user: $userName" -Type 1 -LogFile $logfile
                Write-Verbose -Verbose -Message "No $AppName applications found in HKCU for user: $userName"
            }
        }
        else {
            CMTraceLog -Message "Registry path not found for user: $userName" -Type 1 -LogFile $logfile
            Write-Verbose -Verbose -Message "Registry path not found for user: $userName"
        }
    }
    CMTraceLog -Message "Script Ended at $(Get-Date)" -Type 1 -LogFile $logfile
#endregion
##*=============================================
##* END SCRIPT BODY
##*=============================================